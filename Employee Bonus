/*##############################################################################################################*/

import java.text.SimpleDateFormat;
import java.util.*;
import java.text.ParseException;
public class UserMainCode {
	static TreeMap<Integer, Integer> calculateRevisedSalary(HashMap<Integer, String> dobMap, HashMap<Integer, Integer> salaryMap) throws ParseException {
        TreeMap<Integer, Integer> revisedSalaryMap = new TreeMap<>();
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        Date referenceDate = sdf.parse("01-09-2014");

        for (Integer id : dobMap.keySet()) {
            Date dob = sdf.parse(dobMap.get(id));
            long ageInMillis = referenceDate.getTime() - dob.getTime();
            int age = (int) (ageInMillis / (1000L*60*60*24*365));

            int salary = salaryMap.get(id);
            int revisedSalary;

            if (salary < 5000) {
                revisedSalary = -100;
            } else if (age < 25 || age > 60) {
                revisedSalary = -200;
            } else if (age >= 25 && age <= 30) {
                revisedSalary = salary + (int) (0.2 * salary);
            } else { // age >= 31 && age <= 60
                revisedSalary = salary + (int) (0.3 * salary);
            }

            revisedSalaryMap.put(id, revisedSalary);
        }

        return revisedSalaryMap;
    }
}


/*#####################################################################################################*/

package abc;
import java.util.*;
import java.text.ParseException;
public class Main {
	public static void main(String[] args) throws ParseException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        HashMap<Integer, String> dobMap = new HashMap<>();
        HashMap<Integer, Integer> salaryMap = new HashMap<>();

        for (int i = 0; i < n; i++) {
            int id = scanner.nextInt();
            String dob = scanner.next();
            int salary = scanner.nextInt();
            dobMap.put(id, dob);
            salaryMap.put(id, salary);
        }

        TreeMap<Integer, Integer> revisedSalaryMap = UserMainCode.calculateRevisedSalary(dobMap, salaryMap);
        for (Map.Entry<Integer, Integer> entry : revisedSalaryMap.entrySet()) {
            System.out.println(entry.getKey() + " " + entry.getValue());
        }
    }
}
